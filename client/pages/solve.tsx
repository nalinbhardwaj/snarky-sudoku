import { useEffect, useState } from 'react'
import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { calculateProof, INITIAL_GRID, prettyPrintArray } from '../lib/util'
import {Md5} from 'ts-md5/dist/md5';

const Solve: NextPage = () => {
  const initVal: string = prettyPrintArray(INITIAL_GRID);
  const [unsolvedGridText, setUnsolvedGridText] = useState<string>(initVal);
  const [solvedGridText, setSolvedGridText] = useState<string>(initVal);
  const [status, setStatus] = useState(false);
  const [proof, setProof] = useState(null);
  const [publicSignals, setPublicSignals] = useState(null);
  const [hash, setHash] = useState('');

  async function generateProof() {
    const unsolvedGrid = JSON.parse(unsolvedGridText);
    const solvedGrid = JSON.parse(solvedGridText);
    setHash(Md5.hashStr(JSON.stringify(unsolvedGrid)).slice(0, 6));
    console.log(unsolvedGrid);
    console.log(solvedGrid);

    const res = await calculateProof(unsolvedGrid, solvedGrid);
    console.log(res);
    if (res.verification) {
      setStatus(true);
      setProof(res.proof);
      setPublicSignals(res.publicSignals);
    } else {
      console.log("false res");
      setStatus(false);
      setProof(null);
      setPublicSignals(null);
    }

  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Snarky Sudoku</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Snarky Sudoku
        </h1>

        <p className={styles.description}>
          Solve and generate proof for sudoku
          <code className={styles.code}>{hash}</code>
        </p>

        <div className={styles.grid}>
          <div>
            <p className={styles.description}>Puzzle grid</p>
            <textarea rows={10} className={styles.textarea} value={unsolvedGridText} onChange={event => setUnsolvedGridText(event.target.value)} />
          </div>
          <div>
          <p className={styles.description}>Solution grid</p>
          <textarea rows={10} className={styles.textarea} value={solvedGridText} onChange={event => setSolvedGridText(event.target.value)} />
          </div>
        </div>

        <button onClick={generateProof}>
          Generate Proof
        </button>

        <p className={styles.description}>{status}</p>
        {status ? (
          <>
            <p className={styles.description}>✅ Successful</p>
            <div>
              <p className={styles.description}>Proof</p>
              <textarea rows={10} className={styles.textarea} value={JSON.stringify(proof, null, 1)} />
            </div>
          </>
          ) : (
          <>
            <p className={styles.description}>❌ Wrong solution</p>
          </>
          )
        }


      </main>

      <footer className={styles.footer}>
        <a
          href="https://nibnalin.me"
          target="_blank"
          rel="noopener noreferrer"
        >
          Made by nibnalin.
        </a>
      </footer>
    </div>
  )
}

export default Solve
